// src/composables/useAuth.js
import { ref, reactive, onMounted } from 'vue';
import alt from '@/services/altv.js';
import { EVENTS } from '@/shared/constants.js';

export function useAuth() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º
  const isResetActive = ref(false);
  const isOtpActive = ref(false);
  const isNewPasswordActive = ref(false);
  const isLoading = ref(false);

  // –ê–ª–µ—Ä—Ç—ã
  const alerts = reactive({
    login: { error: null },
    reset: { error: null, success: null },
    otp: { error: null },
    newPassword: { error: null }
  });

  const clearAlerts = () => {
    alerts.login.error = null;
    alerts.reset.error = null;
    alerts.reset.success = null;
    alerts.otp.error = null;
    alerts.newPassword.error = null;
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
  const validatePassword = (password, repeat) => {
    const errors = [];
    if (!password) errors.push('–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
    if (password !== repeat) errors.push('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.');
    if (password.length < 8) errors.push('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤.');
    if (!/[A-Z–ê-–Ø–Å]/.test(password)) errors.push('–ó–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞.');
    if (!/[a-z–∞-—è—ë]/.test(password)) errors.push('–°—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞.');
    if (!/\d/.test(password)) errors.push('–¶–∏—Ñ—Ä–∞.');
    if (!/[!@#$%^&*]/.test(password)) errors.push('–°–ø–µ—Ü—Å–∏–º–≤–æ–ª (!@#$%^&*).');
    return { isValid: errors.length === 0, errors };
  };

  // --- –ú–ï–¢–û–î–´ ---
  const login = () => {
    const username = document.getElementById('login_field')?.value.trim();
    const password = document.getElementById('password_field')?.value.trim();

    if (!username || !password) {
      alerts.login.error = '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è';
      return;
    }

    isLoading.value = true;
    clearAlerts();
    alt.emit(EVENTS.CLIENT.LOGIN, JSON.stringify({ username, password }));
  };

  const requestPasswordReset = () => {
    const email = document.getElementById('email_field')?.value.trim();
    if (!email) {
      alerts.reset.error = '–í–≤–µ–¥–∏—Ç–µ email';
      return;
    }

    isLoading.value = true;
    clearAlerts();
    alt.emit(EVENTS.CLIENT.RESET_PASSWORD, JSON.stringify({ email }));
  };

  const verifyOtp = () => {
    const otpInputs = document.querySelectorAll('.otp-input');
    const otpCode = Array.from(otpInputs).map(el => el.value.trim()).join('');

    if (otpCode.length !== 6) {
      alerts.otp.error = '–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥';
      return;
    }

    isLoading.value = true;
    clearAlerts();
    alt.emit(EVENTS.CLIENT.OTP_VALIDATE, JSON.stringify({ otp_code: otpCode }));
  };

  const setNewPassword = () => {
    const newPass = document.getElementById('new_password_field')?.value.trim();
    const repeatPass = document.getElementById('repeat_new_password_field')?.value.trim();

    const validation = validatePassword(newPass, repeatPass);
    if (!validation.isValid) {
      alerts.newPassword.error = validation.errors[0];
      return;
    }

    // –£—Å–ø–µ—à–Ω–æ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    isNewPasswordActive.value = false;
    isOtpActive.value = false;
    alerts.reset.success = '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!';
    setTimeout(() => {
      alerts.reset.success = null;
      isResetActive.value = false; // –≤–æ–∑–≤—Ä–∞—Ç –∫ –ª–æ–≥–∏–Ω—É
    }, 2000);
  };

  // --- –ù–ê–í–ò–ì–ê–¶–ò–Ø ---
  const switchToReset = () => {
    isResetActive.value = !isResetActive.value;
    isOtpActive.value = false;
    isNewPasswordActive.value = false;
    clearAlerts();
  };

  const switchToOtp = () => {
    isOtpActive.value = true;
    isNewPasswordActive.value = false;
  };

  const switchToNewPassword = () => {
    isNewPasswordActive.value = true;
  };

  const goBackFromOtp = () => {
    isOtpActive.value = false;
    isNewPasswordActive.value = false;
  };

  const goBackFromNewPassword = () => {
    isNewPasswordActive.value = false;
  };

  // --- –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ë–´–¢–ò–ô –û–¢ –°–ï–†–í–ï–†–ê ---
  onMounted(() => {
    // –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
    alt.on(EVENTS.SERVER.LOGIN_SUCCESS, (data) => {
      console.log('asd');
      isLoading.value = false;
      if (data.success) {
        window.location.href = '/profiles/';
      }
    });

    // –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞
    alt.on(EVENTS.SERVER.LOGIN_FAIL, (data) => {
      isLoading.value = false;
      alerts.login.error = data.message || '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
    });

    // –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–±—Ä–æ—Å–∞ ‚Üí –ø–µ—Ä–µ—Ö–æ–¥ –∫ OTP
    alt.on(EVENTS.SERVER.RESET_SUCCESS, (data) => {
      console.log('üîç RESET_SUCCESS –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ:', data);
      isLoading.value = false;
      if (data.success) switchToOtp();
    });

    // –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞
    alt.on(EVENTS.SERVER.RESET_FAIL, (data) => {
      isLoading.value = false;
      alerts.reset.error = data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è';
    });

    // –£—Å–ø–µ—à–Ω—ã–π OTP ‚Üí –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–º—É –ø–∞—Ä–æ–ª—é
    alt.on(EVENTS.SERVER.OTP_SUCCESS, (data) => {
      isLoading.value = false;
      if (data.success) switchToNewPassword();
    });

    // –û—à–∏–±–∫–∞ OTP
    alt.on(EVENTS.SERVER.OTP_FAIL, (data) => {
      isLoading.value = false;
      alerts.otp.error = data.message || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥';
    });
  });

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è
    isResetActive,
    isOtpActive,
    isNewPasswordActive,
    isLoading,

    // –ê–ª–µ—Ä—Ç—ã
    alerts,

    // –ú–µ—Ç–æ–¥—ã
    login,
    requestPasswordReset,
    verifyOtp,
    setNewPassword,
    switchToReset,
    goBackFromOtp,
    goBackFromNewPassword,

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ
    validatePassword
  };
}
